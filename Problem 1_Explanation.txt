Project 2_Basic algorithms Problem 1_explanation

To achieve the goal that the expected time complexity is O(log(n)), we consider using binary search.
The idea is like this:
define lower_number = 0, and a upper_number = input, create a imaginary list of [lower_number, upper_number], this list is dynamically changing;
1. Find the center of the list, tracking both lower and upper limit
2. Check to see if the target i equals the square of the center element
3. If it is, return that element
4. If less, move the upper bound to the current center
5. If greater, move the lower bound to the current center
6. Repeat 1 to 6, until lower bound = upper bound - 1, and return the element at the lower bound

Efficiency:
The time efficiency is O(log(n)), since we here use binary search, which is, the algorithm divide the data into half at each step.
The space efficiency is O(1), since we create only a fixed number of variables (lower_index = 0, upper_index = input number) are created which wonâ€™t change relative to the input number.
    